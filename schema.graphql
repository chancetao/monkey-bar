# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
    subscription: Subscription
}

type AuthUser {
    token: String!
    user: User!
}

type Category {
    label: String!
    value: String!
}

type Comment {
    _id: ID!
    author: User!
    content: String!
    createdAt(format: String): String!
    replies: [Reply]!
    type: CommentTarget!
}

type EmailStatus {
    available: Boolean!
    email: String!
}

type File {
    encoding: String!
    filename: String!
    mimetype: String!
    path: String!
}

type Invite {
    createdAt: String!
    email: String!
    from: User!
    role: Role!
}

type Message {
    _id: ID!
    author: User!
    file: String
    target: User!
    text: String
    type: MessageType
}

type Mutation {
    addCategory(input: [CategoryInput]!): [Category]!
    addComment(input: CommentInput!): Comment!
    createPost(input: NewPostInput!): Post!
    invite(input: InviteInput!): Invite!
    likeAction(target: ID!, type: LikeTarget): Post!
    sendImageToCloud(file: Image!): UploadResponse!
    signIn(input: SignInInput!): AuthUser!
    signUp(input: SignUpInput!): AuthUser!
    updateMe(input: UpdateUserInput!): User
    updateSettings(input: UpdateSettingsInput!): Settings!
}

type Post {
    _id: ID!
    author: User!
    category: Category!
    comments: [Comment]!
    content: String!
    createdAt(format: String): String!
    images: [String]!
    isPublic: Boolean!
    likes: [User]!
    title: String!
    updatedAt(format: String): String!
    views: Int!
}

type Posts {
    data: [Post]!
    hasNextPage: Boolean!
    hasPrevPage: Boolean!
}

type Query {
    category: [Category]!
    email(email: String!): EmailStatus!
    feed: [Post]!
    me: User!
    post(id: ID!): Post!
    posts(filter: PostFilter, pagination: Pagination, rank: Rank): Posts!
    user: User
    userSettings: Settings!
}

type Reply {
    _id: ID!
    author: User!
    content: String!
    createdAt(format: String): String!
    to: User
    type: CommentTarget!
}

type Settings {
    _id: ID!
    emailNotification: Boolean!
    pushNotification: Boolean!
    setTop: [User]
    theme: Theme!
    user: User!
}

type Subscription {
    newMessage: Message
    newPost: Post
}

type UploadResponse {
    message: String!
    res: String!
}

type User {
    _id: ID!
    avatar: String
    createdAt(format: String): String!
    desc: String!
    email: String!
    lastLoginAt(format: String): String!
    name: String!
    posts: [Post]
    role: Role!
    settings: Settings!
    verified: Boolean!
}

enum CacheControlScope {
    PRIVATE
    PUBLIC
}

enum CommentTarget {
    COMMENT
    POST
}

enum LikeTarget {
    COMMENT
    POST
}

enum MessageType {
    CHAT
    COMMENT
    FORWARD
    LIKE
}

enum Role {
    ADMIN
    GUEST
    MEMBER
}

enum Theme {
    DARK
    LIGHT
}

input CategoryInput {
    label: String!
    value: String!
}

input CommentInput {
    content: String!
    target: ID!
    to: ID
    type: CommentTarget!
}

input InviteInput {
    email: String!
    role: Role!
}

input NewPostInput {
    category: String!
    content: String!
    images: [String]!
    isPublic: Boolean!
    title: String!
}

input Pagination {
    limit: Int!
    page: Int!
}

input PostFilter {
    category: String
    keyword: String
}

input Rank {
    sortByDate: Boolean
    sortByHot: Boolean
    sortReverse: Boolean
}

input SignInInput {
    email: String!
    password: String!
}

input SignUpInput {
    email: String!
    name: String!
    password: String!
}

input UpdateSettingsInput {
    emailNotifications: Boolean
    pushNotifications: Boolean
    theme: Theme
}

input UpdateUserInput {
    avatar: String
    desc: String
    email: String
    verified: Boolean
}


scalar Image

"The `Upload` scalar type represents a file upload."
scalar Upload
